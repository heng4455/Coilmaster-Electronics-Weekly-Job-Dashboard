{"ast":null,"code":"import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/auth-js';\nexport { PostgrestError } from '@supabase/postgrest-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, FunctionRegion } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n  return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};","map":{"version":3,"names":["SupabaseClient","PostgrestError","FunctionsHttpError","FunctionsFetchError","FunctionsRelayError","FunctionsError","FunctionRegion","default","createClient","supabaseUrl","supabaseKey","options"],"sources":["D:\\Program2_new\\frontend\\node_modules\\@supabase\\supabase-js\\src\\index.ts"],"sourcesContent":["import SupabaseClient from './SupabaseClient'\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\nimport type { ServicesOptions } from './SupabaseClient'\nimport type { GetGenericDatabaseWithOptions } from '@supabase/postgrest-js'\n\nexport * from '@supabase/auth-js'\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/auth-js'\nexport {\n  type PostgrestResponse,\n  type PostgrestSingleResponse,\n  type PostgrestMaybeSingleResponse,\n  PostgrestError,\n} from '@supabase/postgrest-js'\nexport {\n  FunctionsHttpError,\n  FunctionsFetchError,\n  FunctionsRelayError,\n  FunctionsError,\n  type FunctionInvokeOptions,\n  FunctionRegion,\n} from '@supabase/functions-js'\nexport * from '@supabase/realtime-js'\nexport { default as SupabaseClient } from './SupabaseClient'\nexport type { SupabaseClientOptions, QueryResult, QueryData, QueryError } from './lib/types'\n\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = <\n  Database = any,\n  ClientOptions extends ServicesOptions = GetGenericDatabaseWithOptions<Database>['options'],\n  SchemaName extends string &\n    keyof GetGenericDatabaseWithOptions<Database>['db'] = 'public' extends keyof GetGenericDatabaseWithOptions<Database>['db']\n    ? 'public'\n    : string & keyof GetGenericDatabaseWithOptions<Database>['db'],\n  Schema = GetGenericDatabaseWithOptions<Database>['db'][SchemaName] extends GenericSchema\n    ? GetGenericDatabaseWithOptions<Database>['db'][SchemaName]\n    : any\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  options?: SupabaseClientOptions<SchemaName>\n): SupabaseClient<\n  Database,\n  ClientOptions,\n  SchemaName,\n  Schema extends GenericSchema ? Schema : any\n> => {\n  return new SupabaseClient<\n    Database,\n    ClientOptions,\n    SchemaName,\n    Schema extends GenericSchema ? Schema : any\n  >(supabaseUrl, supabaseKey, options)\n}\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAK7C,cAAc,mBAAmB;AAEjC,SAIEC,cAAc,QACT,wBAAwB;AAC/B,SACEC,kBAAkB,EAClBC,mBAAmB,EACnBC,mBAAmB,EACnBC,cAAc,EAEdC,cAAc,QACT,wBAAwB;AAC/B,cAAc,uBAAuB;AACrC,SAASC,OAAO,IAAIP,cAAc,QAAQ,kBAAkB;AAG5D;;;AAGA,OAAO,MAAMQ,YAAY,GAAGA,CAW1BC,WAAmB,EACnBC,WAAmB,EACnBC,OAA2C,KAMzC;EACF,OAAO,IAAIX,cAAc,CAKvBS,WAAW,EAAEC,WAAW,EAAEC,OAAO,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}